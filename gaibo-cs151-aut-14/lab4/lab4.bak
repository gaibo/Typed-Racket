#lang typed/racket
(require typed/test-engine/racket-tests)

(define-struct Point
  ([x : Real]
   [y : Real])
  #:transparent)

(define-type Dataset (Listof Point))

(define-struct Line
  ([m : Real]
   [b : Real])
  #:transparent)

(: sum : (Listof Real) -> Real)
;; find the sum of the components of a list of Reals
(define (sum list)
  (cond
    [(empty? list) 0]
    [(cons? list) (+ (first list) (sum (rest list)))]))
;; TESTS
(check-within (sum '(1 2 3 4 5 6 7 8 9 10)) 55 0.001)
(check-within (sum '(1 2 3 4 5 6 7 8 9 10 11.23 4.67)) 70.9 0.001)

(: get-x-vals : Dataset -> (Listof Real))
;; get the x-values of a list of Points
(define (get-x-vals dataset)
  (match dataset
    ['() '()]
    [(cons (Point x _) tail) (cons x (get-x-vals tail))]))
;; TESTS
(check-within (get-x-vals (list (make-Point 1 2) (make-Point 3 4))) '(1 3) 0.001)
(check-within (get-x-vals (list (make-Point 0 1) (make-Point 3.00 4.343)))
              '(0 3) 0.001)

(: get-y-vals : Dataset -> (Listof Real))
;; get the y-values of a list of Points
(define (get-y-vals dataset)
  (match dataset
    ['() '()]
    [(cons (Point _ y) tail) (cons y (get-y-vals tail))]))
;; TESTS
(check-within (get-y-vals (list (make-Point 1 2) (make-Point 3 4))) '(2 4) 0.001)
(check-within (get-y-vals (list (make-Point 0 1) (make-Point 3.00 4.343)))
              '(1 4.343) 0.001)

(: mult-lists : (Listof Real) (Listof Real) -> (Listof Real))
;; multiply the respective terms of two lists and return a list of those products
(define (mult-lists list1 list2)
  (cond
    [(not (= (length list1) (length list2)))
     (error "lists not same length, can't multiply elements")]
    [(empty? list1) empty]
    [(cons (* (first list1) (first list2))
           (mult-lists (rest list1) (rest list2)))]))
;; TESTS
(check-within (mult-lists '(1 2 3 4) '(1 2 3 4)) '(1 4 9 16) 0.001)
(check-error (mult-lists '(1 2 3 4) '(1 2 3))
             "lists not same length, can't multiply elements")

(: slope : Dataset -> Real)
;; find the best-fit slope for the linear model of a Dataset
(define (slope dataset)
  (/ (- (* (length dataset) (sum (mult-lists (get-x-vals dataset)
                                             (get-y-vals dataset))))
        (* (sum (get-x-vals dataset)) (sum (get-y-vals dataset))))
     (- (* (length dataset) (sum (mult-lists (get-x-vals dataset)
                                             (get-x-vals dataset))))
        (sqr (sum (get-x-vals dataset))))))
;; TESTS
; need to design something
; lots of testing

(test)